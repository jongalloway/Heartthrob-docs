@{
    ViewData["Title"] = "Kendo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Rich text box</h2>
<p>A rich text box is several lines high, and allows for more and/or richer text to be entered Note that having a rich text box does not mean that “rich” text must be entered.</p>
<div class="space-medium"></div>
<h4>Examples</h4>
<br />
<div class="row">
    <div class="col-md-5">
        <!-- TODO: Image uploader -->
        @(Html.Kendo().Editor()
                  .Name("editor")
                  .HtmlAttributes(new { style = "height:300px" })
                  .Resizable(resizable => resizable.Content(true).Toolbar(true))
                  .Value(@<text>
                    <p>
                        Kendo UI Editor allows your users to edit HTML in a familiar, user-friendly way.<br />
                        In this version, the Editor provides the core HTML editing engine, which includes basic text formatting, hyperlinks, lists,
                        and image handling. The widget <strong>outputs identical HTML</strong> across all major browsers, follows
                        accessibility standards and provides API for content manipulation.
                    </p>
                </text>)
        )
    </div>
</div>

<div class="space-medium"></div>
<h2>Basic dropdown</h2>
<p>Basic dropdowns are used to select single text-based elements from a list of items.</p>
<div class="space-medium"></div>

<h4>Example</h4>
<div class="row">
    <div class="col-md-4">
        @(Html.Kendo().DropDownList()
                 .Name("color")
                 .DataTextField("Text")
                 .DataValueField("Value").AutoWidth(true)
                 .BindTo(new List<SelectListItem>() {
              new SelectListItem() {
                  Text = "Black",
                  Value = "1"
              },
              new SelectListItem() {
                  Text = "Orange",
                  Value = "2"
              },
              new SelectListItem() {
                  Text = "Grey",
                  Value = "3"
              }
                 })
                 .Value("1")
        )
    </div>
</div>
